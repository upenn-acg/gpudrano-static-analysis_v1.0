<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE entry SYSTEM "SamplesInfo.dtd">
<entry>
  <name>cudaDecodeGL</name>
  <cuda_api_list>
    <driver>cuDeviceGet</driver>
    <driver>cuDeviceGetAttribute</driver>
    <driver>cuDeviceComputeCapability</driver>
    <driver>cuDeviceGetCount</driver>
    <driver>cuDeviceGetName</driver>
    <driver>cuDeviceTotalMem</driver>
    <driver>cuGLCtxCreate</driver>
    <driver>cuGLGetDevice</driver>
    <driver>cuModuleLoad</driver>
    <driver>cuModuleUnload</driver>
    <driver>cuModuleGetFunction</driver>
    <driver>cuModuleGetGlobal</driver>
    <driver>cuModuleLoadDataEx</driver>
    <driver>cuModuleGetTexRef</driver>
    <driver>cuGLMapResources</driver>
    <driver>cuGLUnmapResources</driver>
    <driver>cuGLRegisterResource</driver>
    <driver>cuGLUnregisterResource</driver>
    <driver>cuGLResourceSetMapFlags</driver>
    <driver>cuGLResourceGetMappedPointer</driver>
    <driver>cuGLResourceGetMappedPitch</driver>
    <driver>cuParamSetv</driver>
    <driver>cuParamSeti</driver>
    <driver>cuParamSetSize</driver>
    <driver>cuLaunchGridAsync</driver>
    <driver>cuCtxCreate</driver>
    <driver>cuMemAlloc</driver>
    <driver>cuMemFree</driver>
    <driver>cuMemAllocHost</driver>
    <driver>cuMemFreeHost</driver>
    <driver>cuMemcpyDtoHAsync</driver>
    <driver>cuMemsetD8</driver>
    <driver>cuStreamCreate</driver>
    <driver>cuCtxPushCurrent</driver>
    <driver>cuCtxPopCurrent</driver>
    <driver>cuvidCreateDecoder</driver>
    <driver>cuvidDecodePicture</driver>
    <driver>cuvidMapVideoFrame</driver>
    <driver>cuvidUnmapVideoFrame</driver>
    <driver>cuvidDestroyDecoder</driver>
    <driver>cuvidCtxLockCreate</driver>
    <driver>cuvidCtxLockDestroy</driver>
    <driver>cuCtxDestroy</driver>
  </cuda_api_list>
  <description><![CDATA[This sample demonstrates how to efficiently use the CUDA Video Decoder API to decode video sources based on MPEG-2, VC-1, and H.264.  YUV to RGB conversion of video is accomplished with CUDA kernel.  The output result is rendered to a OpenGL surface.  The decoded video is black, but can be enabled with -displayvideo added to the command line.  Requires Compute Capability 2.0 or higher.]]></description>
  <devicecompilation>whole</devicecompilation>
  <fallback_min_ptx>true</fallback_min_ptx>
  <files>
    <file>data\NV12ToARGB_drvapi32.ptx</file>
    <file>data\NV12ToARGB_drvapi64.ptx</file>
    <file>data\plush1_720p_10s.m2v</file>
  </files>
  <includepaths>
    <path>./</path>
    <path>../</path>
    <path>../../common/inc</path>
  </includepaths>
  <keyconcepts>
    <concept level="advanced">Graphics Interop</concept>
    <concept level="advanced">Image Processing</concept>
    <concept level="advanced">Video Compression</concept>
  </keyconcepts>
  <keywords>
    <keyword>CUDA</keyword>
    <keyword>NVCUVID</keyword>
    <keyword>GPGPU</keyword>
    <keyword>video</keyword>
    <keyword>opengl</keyword>
    <keyword>openGL</keyword>
  </keywords>
  <libraries>
    <library>cudart</library>
    <library>nvcuvid</library>
    <library os="linux">cuda</library>
    <library framework="true" os="macosx">CUDA</library>
    <library>GLU</library>
    <library>GL</library>
    <library framework="true" os="macosx">GLUT</library>
    <library os="linux">GLEW</library>
    <library os="linux">glut</library>
    <library os="linux">X11</library>
  </libraries>
  <librarypaths>
    <path arch="x86_64" os="linux">../../common/lib/linux/x86_64</path>
    <path arch="armv7l" os="linux">../../common/lib/linux/armv7l</path>
    <path os="macosx">../../common/lib/darwin</path>
  </librarypaths>
  <nsight_eclipse>true</nsight_eclipse>
  <primary_file>videoDecodeGL.cpp</primary_file>
  <ptx>NV12ToARGB_drvapi</ptx>
  <required_dependencies>
    <dependency>X11</dependency>
    <dependency>GL</dependency>
    <dependency>cuvid</dependency>
  </required_dependencies>
  <scopes>
    <scope>2:Graphics Interop</scope>
    <scope>2:Image Processing</scope>
    <scope>2:Data Compression</scope>
    <scope>2:Video Codecs</scope>
    <scope>2:Computer Vision</scope>
  </scopes>
  <sm-arch>sm20</sm-arch>
  <sm-arch>sm30</sm-arch>
  <sm-arch>sm35</sm-arch>
  <sm-arch>sm37</sm-arch>
  <sm-arch>sm50</sm-arch>
  <sm-arch>sm52</sm-arch>
  <sm-arch>sm60</sm-arch>
  <sources>
    <extranone>data\plush1_720p_10s.m2v</extranone>
  </sources>
  <supported_envs>
    <env>
      <arch>x86_64</arch>
      <platform>linux</platform>
    </env>
    <env>
      <platform>windows7</platform>
    </env>
  </supported_envs>
  <supported_sm_architectures>
    <include>all</include>
  </supported_sm_architectures>
  <title>CUDA Video Decoder GL API</title>
  <type>exe</type>
  <whitepaper>doc\nvcuvid.pdf</whitepaper>
</entry>
